// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.
// This file was generated by robots at
// 2019-01-17T14:10:27-06:00
// using the command
// $ go-mockgen --force -p testing -i GraphManager -d ./grammes/testing github.com/northwesternmutual/grammes/manager

package testing

import (
	logging "github.com/northwesternmutual/grammes/logging"
	manager "github.com/northwesternmutual/grammes/manager"
	model "github.com/northwesternmutual/grammes/model"
	query "github.com/northwesternmutual/grammes/query"
	cardinality "github.com/northwesternmutual/grammes/query/cardinality"
	datatype "github.com/northwesternmutual/grammes/query/datatype"
	multiplicity "github.com/northwesternmutual/grammes/query/multiplicity"
)

// MockGraphManager is a mock impelementation of the GraphManager interface
// (from the package github.com/northwesternmutual/grammes/manager) used for
// unit testing.
type MockGraphManager struct {
	// AddAPIVertexFunc is an instance of a mock function object controlling
	// the behavior of the method AddAPIVertex.
	AddAPIVertexFunc *GraphManagerAddAPIVertexFunc
	// AddEdgeLabelFunc is an instance of a mock function object controlling
	// the behavior of the method AddEdgeLabel.
	AddEdgeLabelFunc *GraphManagerAddEdgeLabelFunc
	// AddEdgeLabelsFunc is an instance of a mock function object
	// controlling the behavior of the method AddEdgeLabels.
	AddEdgeLabelsFunc *GraphManagerAddEdgeLabelsFunc
	// AddPropertyKeyFunc is an instance of a mock function object
	// controlling the behavior of the method AddPropertyKey.
	AddPropertyKeyFunc *GraphManagerAddPropertyKeyFunc
	// AddVertexFunc is an instance of a mock function object controlling
	// the behavior of the method AddVertex.
	AddVertexFunc *GraphManagerAddVertexFunc
	// AddVertexByQueryFunc is an instance of a mock function object
	// controlling the behavior of the method AddVertexByQuery.
	AddVertexByQueryFunc *GraphManagerAddVertexByQueryFunc
	// AddVertexByStringFunc is an instance of a mock function object
	// controlling the behavior of the method AddVertexByString.
	AddVertexByStringFunc *GraphManagerAddVertexByStringFunc
	// AddVertexByStructFunc is an instance of a mock function object
	// controlling the behavior of the method AddVertexByStruct.
	AddVertexByStructFunc *GraphManagerAddVertexByStructFunc
	// AddVertexLabelsFunc is an instance of a mock function object
	// controlling the behavior of the method AddVertexLabels.
	AddVertexLabelsFunc *GraphManagerAddVertexLabelsFunc
	// AddVertexQuerierFunc is an instance of a mock function object
	// controlling the behavior of the method AddVertexQuerier.
	AddVertexQuerierFunc *GraphManagerAddVertexQuerierFunc
	// AllVerticesFunc is an instance of a mock function object controlling
	// the behavior of the method AllVertices.
	AllVerticesFunc *GraphManagerAllVerticesFunc
	// CommitSchemaFunc is an instance of a mock function object controlling
	// the behavior of the method CommitSchema.
	CommitSchemaFunc *GraphManagerCommitSchemaFunc
	// DropAllFunc is an instance of a mock function object controlling the
	// behavior of the method DropAll.
	DropAllFunc *GraphManagerDropAllFunc
	// DropQuerierFunc is an instance of a mock function object controlling
	// the behavior of the method DropQuerier.
	DropQuerierFunc *GraphManagerDropQuerierFunc
	// DropVertexByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DropVertexByID.
	DropVertexByIDFunc *GraphManagerDropVertexByIDFunc
	// DropVertexLabelFunc is an instance of a mock function object
	// controlling the behavior of the method DropVertexLabel.
	DropVertexLabelFunc *GraphManagerDropVertexLabelFunc
	// DropVerticesByQueryFunc is an instance of a mock function object
	// controlling the behavior of the method DropVerticesByQuery.
	DropVerticesByQueryFunc *GraphManagerDropVerticesByQueryFunc
	// DropVerticesByStringFunc is an instance of a mock function object
	// controlling the behavior of the method DropVerticesByString.
	DropVerticesByStringFunc *GraphManagerDropVerticesByStringFunc
	// ExecuteBoundQueryFunc is an instance of a mock function object
	// controlling the behavior of the method ExecuteBoundQuery.
	ExecuteBoundQueryFunc *GraphManagerExecuteBoundQueryFunc
	// ExecuteBoundStringQueryFunc is an instance of a mock function object
	// controlling the behavior of the method ExecuteBoundStringQuery.
	ExecuteBoundStringQueryFunc *GraphManagerExecuteBoundStringQueryFunc
	// ExecuteQuerierFunc is an instance of a mock function object
	// controlling the behavior of the method ExecuteQuerier.
	ExecuteQuerierFunc *GraphManagerExecuteQuerierFunc
	// ExecuteQueryFunc is an instance of a mock function object controlling
	// the behavior of the method ExecuteQuery.
	ExecuteQueryFunc *GraphManagerExecuteQueryFunc
	// ExecuteStringQueryFunc is an instance of a mock function object
	// controlling the behavior of the method ExecuteStringQuery.
	ExecuteStringQueryFunc *GraphManagerExecuteStringQueryFunc
	// GetVertexIDQuerierFunc is an instance of a mock function object
	// controlling the behavior of the method GetVertexIDQuerier.
	GetVertexIDQuerierFunc *GraphManagerGetVertexIDQuerierFunc
	// GetVertexQuerierFunc is an instance of a mock function object
	// controlling the behavior of the method GetVertexQuerier.
	GetVertexQuerierFunc *GraphManagerGetVertexQuerierFunc
	// MiscQuerierFunc is an instance of a mock function object controlling
	// the behavior of the method MiscQuerier.
	MiscQuerierFunc *GraphManagerMiscQuerierFunc
	// SchemaQuerierFunc is an instance of a mock function object
	// controlling the behavior of the method SchemaQuerier.
	SchemaQuerierFunc *GraphManagerSchemaQuerierFunc
	// SetLoggerFunc is an instance of a mock function object controlling
	// the behavior of the method SetLogger.
	SetLoggerFunc *GraphManagerSetLoggerFunc
	// SetVertexPropertyFunc is an instance of a mock function object
	// controlling the behavior of the method SetVertexProperty.
	SetVertexPropertyFunc *GraphManagerSetVertexPropertyFunc
	// VertexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method VertexByID.
	VertexByIDFunc *GraphManagerVertexByIDFunc
	// VertexCountFunc is an instance of a mock function object controlling
	// the behavior of the method VertexCount.
	VertexCountFunc *GraphManagerVertexCountFunc
	// VertexIDsFunc is an instance of a mock function object controlling
	// the behavior of the method VertexIDs.
	VertexIDsFunc *GraphManagerVertexIDsFunc
	// VertexIDsByQueryFunc is an instance of a mock function object
	// controlling the behavior of the method VertexIDsByQuery.
	VertexIDsByQueryFunc *GraphManagerVertexIDsByQueryFunc
	// VertexIDsByStringFunc is an instance of a mock function object
	// controlling the behavior of the method VertexIDsByString.
	VertexIDsByStringFunc *GraphManagerVertexIDsByStringFunc
	// VertexQuerierFunc is an instance of a mock function object
	// controlling the behavior of the method VertexQuerier.
	VertexQuerierFunc *GraphManagerVertexQuerierFunc
	// VerticesFunc is an instance of a mock function object controlling the
	// behavior of the method Vertices.
	VerticesFunc *GraphManagerVerticesFunc
	// VerticesByQueryFunc is an instance of a mock function object
	// controlling the behavior of the method VerticesByQuery.
	VerticesByQueryFunc *GraphManagerVerticesByQueryFunc
	// VerticesByStringFunc is an instance of a mock function object
	// controlling the behavior of the method VerticesByString.
	VerticesByStringFunc *GraphManagerVerticesByStringFunc
}

// NewMockGraphManager creates a new mock of the GraphManager interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGraphManager() *MockGraphManager {
	return &MockGraphManager{
		AddAPIVertexFunc: &GraphManagerAddAPIVertexFunc{
			defaultHook: func(model.APIData) (model.Vertex, error) {
				return model.Vertex{}, nil
			},
		},
		AddEdgeLabelFunc: &GraphManagerAddEdgeLabelFunc{
			defaultHook: func(multiplicity.Multiplicity, string) (int64, error) {
				return 0, nil
			},
		},
		AddEdgeLabelsFunc: &GraphManagerAddEdgeLabelsFunc{
			defaultHook: func(...interface{}) ([]int64, error) {
				return nil, nil
			},
		},
		AddPropertyKeyFunc: &GraphManagerAddPropertyKeyFunc{
			defaultHook: func(string, datatype.DataType, cardinality.Cardinality) (int64, error) {
				return 0, nil
			},
		},
		AddVertexFunc: &GraphManagerAddVertexFunc{
			defaultHook: func(string, ...interface{}) (model.Vertex, error) {
				return model.Vertex{}, nil
			},
		},
		AddVertexByQueryFunc: &GraphManagerAddVertexByQueryFunc{
			defaultHook: func(query.Query) (model.Vertex, error) {
				return model.Vertex{}, nil
			},
		},
		AddVertexByStringFunc: &GraphManagerAddVertexByStringFunc{
			defaultHook: func(string) (model.Vertex, error) {
				return model.Vertex{}, nil
			},
		},
		AddVertexByStructFunc: &GraphManagerAddVertexByStructFunc{
			defaultHook: func(model.Vertex) (model.Vertex, error) {
				return model.Vertex{}, nil
			},
		},
		AddVertexLabelsFunc: &GraphManagerAddVertexLabelsFunc{
			defaultHook: func(...string) ([]model.Vertex, error) {
				return nil, nil
			},
		},
		AddVertexQuerierFunc: &GraphManagerAddVertexQuerierFunc{
			defaultHook: func() manager.AddVertexQuerier {
				return nil
			},
		},
		AllVerticesFunc: &GraphManagerAllVerticesFunc{
			defaultHook: func() ([]model.Vertex, error) {
				return nil, nil
			},
		},
		CommitSchemaFunc: &GraphManagerCommitSchemaFunc{
			defaultHook: func() ([]byte, error) {
				return nil, nil
			},
		},
		DropAllFunc: &GraphManagerDropAllFunc{
			defaultHook: func() error {
				return nil
			},
		},
		DropQuerierFunc: &GraphManagerDropQuerierFunc{
			defaultHook: func() manager.DropQuerier {
				return nil
			},
		},
		DropVertexByIDFunc: &GraphManagerDropVertexByIDFunc{
			defaultHook: func(...int64) error {
				return nil
			},
		},
		DropVertexLabelFunc: &GraphManagerDropVertexLabelFunc{
			defaultHook: func(string) error {
				return nil
			},
		},
		DropVerticesByQueryFunc: &GraphManagerDropVerticesByQueryFunc{
			defaultHook: func(query.Query) error {
				return nil
			},
		},
		DropVerticesByStringFunc: &GraphManagerDropVerticesByStringFunc{
			defaultHook: func(string) error {
				return nil
			},
		},
		ExecuteBoundQueryFunc: &GraphManagerExecuteBoundQueryFunc{
			defaultHook: func(query.Query, map[string]string, map[string]string) ([]byte, error) {
				return nil, nil
			},
		},
		ExecuteBoundStringQueryFunc: &GraphManagerExecuteBoundStringQueryFunc{
			defaultHook: func(string, map[string]string, map[string]string) ([]byte, error) {
				return nil, nil
			},
		},
		ExecuteQuerierFunc: &GraphManagerExecuteQuerierFunc{
			defaultHook: func() manager.ExecuteQuerier {
				return nil
			},
		},
		ExecuteQueryFunc: &GraphManagerExecuteQueryFunc{
			defaultHook: func(query.Query) ([]byte, error) {
				return nil, nil
			},
		},
		ExecuteStringQueryFunc: &GraphManagerExecuteStringQueryFunc{
			defaultHook: func(string) ([]byte, error) {
				return nil, nil
			},
		},
		GetVertexIDQuerierFunc: &GraphManagerGetVertexIDQuerierFunc{
			defaultHook: func() manager.GetVertexIDQuerier {
				return nil
			},
		},
		GetVertexQuerierFunc: &GraphManagerGetVertexQuerierFunc{
			defaultHook: func() manager.GetVertexQuerier {
				return nil
			},
		},
		MiscQuerierFunc: &GraphManagerMiscQuerierFunc{
			defaultHook: func() manager.MiscQuerier {
				return nil
			},
		},
		SchemaQuerierFunc: &GraphManagerSchemaQuerierFunc{
			defaultHook: func() manager.SchemaQuerier {
				return nil
			},
		},
		SetLoggerFunc: &GraphManagerSetLoggerFunc{
			defaultHook: func(logging.Logger) {
				return
			},
		},
		SetVertexPropertyFunc: &GraphManagerSetVertexPropertyFunc{
			defaultHook: func(int64, ...interface{}) error {
				return nil
			},
		},
		VertexByIDFunc: &GraphManagerVertexByIDFunc{
			defaultHook: func(int64) (model.Vertex, error) {
				return model.Vertex{}, nil
			},
		},
		VertexCountFunc: &GraphManagerVertexCountFunc{
			defaultHook: func() (int64, error) {
				return 0, nil
			},
		},
		VertexIDsFunc: &GraphManagerVertexIDsFunc{
			defaultHook: func(string, ...interface{}) ([]int64, error) {
				return nil, nil
			},
		},
		VertexIDsByQueryFunc: &GraphManagerVertexIDsByQueryFunc{
			defaultHook: func(query.Query) ([]int64, error) {
				return nil, nil
			},
		},
		VertexIDsByStringFunc: &GraphManagerVertexIDsByStringFunc{
			defaultHook: func(string) ([]int64, error) {
				return nil, nil
			},
		},
		VertexQuerierFunc: &GraphManagerVertexQuerierFunc{
			defaultHook: func() manager.VertexQuerier {
				return nil
			},
		},
		VerticesFunc: &GraphManagerVerticesFunc{
			defaultHook: func(string, ...interface{}) ([]model.Vertex, error) {
				return nil, nil
			},
		},
		VerticesByQueryFunc: &GraphManagerVerticesByQueryFunc{
			defaultHook: func(query.Query) ([]model.Vertex, error) {
				return nil, nil
			},
		},
		VerticesByStringFunc: &GraphManagerVerticesByStringFunc{
			defaultHook: func(string) ([]model.Vertex, error) {
				return nil, nil
			},
		},
	}
}

// NewMockGraphManagerFrom creates a new mock of the MockGraphManager
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGraphManagerFrom(i manager.GraphManager) *MockGraphManager {
	return &MockGraphManager{
		AddAPIVertexFunc: &GraphManagerAddAPIVertexFunc{
			defaultHook: i.AddAPIVertex,
		},
		AddEdgeLabelFunc: &GraphManagerAddEdgeLabelFunc{
			defaultHook: i.AddEdgeLabel,
		},
		AddEdgeLabelsFunc: &GraphManagerAddEdgeLabelsFunc{
			defaultHook: i.AddEdgeLabels,
		},
		AddPropertyKeyFunc: &GraphManagerAddPropertyKeyFunc{
			defaultHook: i.AddPropertyKey,
		},
		AddVertexFunc: &GraphManagerAddVertexFunc{
			defaultHook: i.AddVertex,
		},
		AddVertexByQueryFunc: &GraphManagerAddVertexByQueryFunc{
			defaultHook: i.AddVertexByQuery,
		},
		AddVertexByStringFunc: &GraphManagerAddVertexByStringFunc{
			defaultHook: i.AddVertexByString,
		},
		AddVertexByStructFunc: &GraphManagerAddVertexByStructFunc{
			defaultHook: i.AddVertexByStruct,
		},
		AddVertexLabelsFunc: &GraphManagerAddVertexLabelsFunc{
			defaultHook: i.AddVertexLabels,
		},
		AddVertexQuerierFunc: &GraphManagerAddVertexQuerierFunc{
			defaultHook: i.AddVertexQuerier,
		},
		AllVerticesFunc: &GraphManagerAllVerticesFunc{
			defaultHook: i.AllVertices,
		},
		CommitSchemaFunc: &GraphManagerCommitSchemaFunc{
			defaultHook: i.CommitSchema,
		},
		DropAllFunc: &GraphManagerDropAllFunc{
			defaultHook: i.DropAll,
		},
		DropQuerierFunc: &GraphManagerDropQuerierFunc{
			defaultHook: i.DropQuerier,
		},
		DropVertexByIDFunc: &GraphManagerDropVertexByIDFunc{
			defaultHook: i.DropVertexByID,
		},
		DropVertexLabelFunc: &GraphManagerDropVertexLabelFunc{
			defaultHook: i.DropVertexLabel,
		},
		DropVerticesByQueryFunc: &GraphManagerDropVerticesByQueryFunc{
			defaultHook: i.DropVerticesByQuery,
		},
		DropVerticesByStringFunc: &GraphManagerDropVerticesByStringFunc{
			defaultHook: i.DropVerticesByString,
		},
		ExecuteBoundQueryFunc: &GraphManagerExecuteBoundQueryFunc{
			defaultHook: i.ExecuteBoundQuery,
		},
		ExecuteBoundStringQueryFunc: &GraphManagerExecuteBoundStringQueryFunc{
			defaultHook: i.ExecuteBoundStringQuery,
		},
		ExecuteQuerierFunc: &GraphManagerExecuteQuerierFunc{
			defaultHook: i.ExecuteQuerier,
		},
		ExecuteQueryFunc: &GraphManagerExecuteQueryFunc{
			defaultHook: i.ExecuteQuery,
		},
		ExecuteStringQueryFunc: &GraphManagerExecuteStringQueryFunc{
			defaultHook: i.ExecuteStringQuery,
		},
		GetVertexIDQuerierFunc: &GraphManagerGetVertexIDQuerierFunc{
			defaultHook: i.GetVertexIDQuerier,
		},
		GetVertexQuerierFunc: &GraphManagerGetVertexQuerierFunc{
			defaultHook: i.GetVertexQuerier,
		},
		MiscQuerierFunc: &GraphManagerMiscQuerierFunc{
			defaultHook: i.MiscQuerier,
		},
		SchemaQuerierFunc: &GraphManagerSchemaQuerierFunc{
			defaultHook: i.SchemaQuerier,
		},
		SetLoggerFunc: &GraphManagerSetLoggerFunc{
			defaultHook: i.SetLogger,
		},
		SetVertexPropertyFunc: &GraphManagerSetVertexPropertyFunc{
			defaultHook: i.SetVertexProperty,
		},
		VertexByIDFunc: &GraphManagerVertexByIDFunc{
			defaultHook: i.VertexByID,
		},
		VertexCountFunc: &GraphManagerVertexCountFunc{
			defaultHook: i.VertexCount,
		},
		VertexIDsFunc: &GraphManagerVertexIDsFunc{
			defaultHook: i.VertexIDs,
		},
		VertexIDsByQueryFunc: &GraphManagerVertexIDsByQueryFunc{
			defaultHook: i.VertexIDsByQuery,
		},
		VertexIDsByStringFunc: &GraphManagerVertexIDsByStringFunc{
			defaultHook: i.VertexIDsByString,
		},
		VertexQuerierFunc: &GraphManagerVertexQuerierFunc{
			defaultHook: i.VertexQuerier,
		},
		VerticesFunc: &GraphManagerVerticesFunc{
			defaultHook: i.Vertices,
		},
		VerticesByQueryFunc: &GraphManagerVerticesByQueryFunc{
			defaultHook: i.VerticesByQuery,
		},
		VerticesByStringFunc: &GraphManagerVerticesByStringFunc{
			defaultHook: i.VerticesByString,
		},
	}
}

// GraphManagerAddAPIVertexFunc describes the behavior when the AddAPIVertex
// method of the parent MockGraphManager instance is invoked.
type GraphManagerAddAPIVertexFunc struct {
	defaultHook func(model.APIData) (model.Vertex, error)
	hooks       []func(model.APIData) (model.Vertex, error)
	history     []GraphManagerAddAPIVertexFuncCall
}

// AddAPIVertex delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) AddAPIVertex(v0 model.APIData) (model.Vertex, error) {
	r0, r1 := m.AddAPIVertexFunc.nextHook()(v0)
	m.AddAPIVertexFunc.history = append(m.AddAPIVertexFunc.history, GraphManagerAddAPIVertexFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddAPIVertex method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerAddAPIVertexFunc) SetDefaultHook(hook func(model.APIData) (model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddAPIVertex method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerAddAPIVertexFunc) PushHook(hook func(model.APIData) (model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddAPIVertexFunc) SetDefaultReturn(r0 model.Vertex, r1 error) {
	f.SetDefaultHook(func(model.APIData) (model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddAPIVertexFunc) PushReturn(r0 model.Vertex, r1 error) {
	f.PushHook(func(model.APIData) (model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddAPIVertexFunc) nextHook() func(model.APIData) (model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddAPIVertexFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerAddAPIVertexFunc) History() []GraphManagerAddAPIVertexFuncCall {
	return f.history
}

// GraphManagerAddAPIVertexFuncCall is an object that describes an
// invocation of method AddAPIVertex on an instance of MockGraphManager.
type GraphManagerAddAPIVertexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 model.APIData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAddAPIVertexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddAPIVertexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddEdgeLabelFunc describes the behavior when the AddEdgeLabel
// method of the parent MockGraphManager instance is invoked.
type GraphManagerAddEdgeLabelFunc struct {
	defaultHook func(multiplicity.Multiplicity, string) (int64, error)
	hooks       []func(multiplicity.Multiplicity, string) (int64, error)
	history     []GraphManagerAddEdgeLabelFuncCall
}

// AddEdgeLabel delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) AddEdgeLabel(v0 multiplicity.Multiplicity, v1 string) (int64, error) {
	r0, r1 := m.AddEdgeLabelFunc.nextHook()(v0, v1)
	m.AddEdgeLabelFunc.history = append(m.AddEdgeLabelFunc.history, GraphManagerAddEdgeLabelFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddEdgeLabel method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerAddEdgeLabelFunc) SetDefaultHook(hook func(multiplicity.Multiplicity, string) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddEdgeLabel method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerAddEdgeLabelFunc) PushHook(hook func(multiplicity.Multiplicity, string) (int64, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddEdgeLabelFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(multiplicity.Multiplicity, string) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddEdgeLabelFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(multiplicity.Multiplicity, string) (int64, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddEdgeLabelFunc) nextHook() func(multiplicity.Multiplicity, string) (int64, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddEdgeLabelFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerAddEdgeLabelFunc) History() []GraphManagerAddEdgeLabelFuncCall {
	return f.history
}

// GraphManagerAddEdgeLabelFuncCall is an object that describes an
// invocation of method AddEdgeLabel on an instance of MockGraphManager.
type GraphManagerAddEdgeLabelFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 multiplicity.Multiplicity
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAddEdgeLabelFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddEdgeLabelFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddEdgeLabelsFunc describes the behavior when the
// AddEdgeLabels method of the parent MockGraphManager instance is invoked.
type GraphManagerAddEdgeLabelsFunc struct {
	defaultHook func(...interface{}) ([]int64, error)
	hooks       []func(...interface{}) ([]int64, error)
	history     []GraphManagerAddEdgeLabelsFuncCall
}

// AddEdgeLabels delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) AddEdgeLabels(v0 ...interface{}) ([]int64, error) {
	r0, r1 := m.AddEdgeLabelsFunc.nextHook()(v0...)
	m.AddEdgeLabelsFunc.history = append(m.AddEdgeLabelsFunc.history, GraphManagerAddEdgeLabelsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddEdgeLabels method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerAddEdgeLabelsFunc) SetDefaultHook(hook func(...interface{}) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddEdgeLabels method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerAddEdgeLabelsFunc) PushHook(hook func(...interface{}) ([]int64, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddEdgeLabelsFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(...interface{}) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddEdgeLabelsFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(...interface{}) ([]int64, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddEdgeLabelsFunc) nextHook() func(...interface{}) ([]int64, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddEdgeLabelsFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerAddEdgeLabelsFunc) History() []GraphManagerAddEdgeLabelsFuncCall {
	return f.history
}

// GraphManagerAddEdgeLabelsFuncCall is an object that describes an
// invocation of method AddEdgeLabels on an instance of MockGraphManager.
type GraphManagerAddEdgeLabelsFuncCall struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GraphManagerAddEdgeLabelsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddEdgeLabelsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddPropertyKeyFunc describes the behavior when the
// AddPropertyKey method of the parent MockGraphManager instance is invoked.
type GraphManagerAddPropertyKeyFunc struct {
	defaultHook func(string, datatype.DataType, cardinality.Cardinality) (int64, error)
	hooks       []func(string, datatype.DataType, cardinality.Cardinality) (int64, error)
	history     []GraphManagerAddPropertyKeyFuncCall
}

// AddPropertyKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) AddPropertyKey(v0 string, v1 datatype.DataType, v2 cardinality.Cardinality) (int64, error) {
	r0, r1 := m.AddPropertyKeyFunc.nextHook()(v0, v1, v2)
	m.AddPropertyKeyFunc.history = append(m.AddPropertyKeyFunc.history, GraphManagerAddPropertyKeyFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddPropertyKey
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerAddPropertyKeyFunc) SetDefaultHook(hook func(string, datatype.DataType, cardinality.Cardinality) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddPropertyKey method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerAddPropertyKeyFunc) PushHook(hook func(string, datatype.DataType, cardinality.Cardinality) (int64, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddPropertyKeyFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(string, datatype.DataType, cardinality.Cardinality) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddPropertyKeyFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(string, datatype.DataType, cardinality.Cardinality) (int64, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddPropertyKeyFunc) nextHook() func(string, datatype.DataType, cardinality.Cardinality) (int64, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddPropertyKeyFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerAddPropertyKeyFunc) History() []GraphManagerAddPropertyKeyFuncCall {
	return f.history
}

// GraphManagerAddPropertyKeyFuncCall is an object that describes an
// invocation of method AddPropertyKey on an instance of MockGraphManager.
type GraphManagerAddPropertyKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 datatype.DataType
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 cardinality.Cardinality
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAddPropertyKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddPropertyKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddVertexFunc describes the behavior when the AddVertex
// method of the parent MockGraphManager instance is invoked.
type GraphManagerAddVertexFunc struct {
	defaultHook func(string, ...interface{}) (model.Vertex, error)
	hooks       []func(string, ...interface{}) (model.Vertex, error)
	history     []GraphManagerAddVertexFuncCall
}

// AddVertex delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGraphManager) AddVertex(v0 string, v1 ...interface{}) (model.Vertex, error) {
	r0, r1 := m.AddVertexFunc.nextHook()(v0, v1...)
	m.AddVertexFunc.history = append(m.AddVertexFunc.history, GraphManagerAddVertexFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddVertex method of
// the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerAddVertexFunc) SetDefaultHook(hook func(string, ...interface{}) (model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddVertex method of the parent MockGraphManager instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GraphManagerAddVertexFunc) PushHook(hook func(string, ...interface{}) (model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddVertexFunc) SetDefaultReturn(r0 model.Vertex, r1 error) {
	f.SetDefaultHook(func(string, ...interface{}) (model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddVertexFunc) PushReturn(r0 model.Vertex, r1 error) {
	f.PushHook(func(string, ...interface{}) (model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddVertexFunc) nextHook() func(string, ...interface{}) (model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddVertexFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerAddVertexFunc) History() []GraphManagerAddVertexFuncCall {
	return f.history
}

// GraphManagerAddVertexFuncCall is an object that describes an invocation
// of method AddVertex on an instance of MockGraphManager.
type GraphManagerAddVertexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GraphManagerAddVertexFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddVertexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddVertexByQueryFunc describes the behavior when the
// AddVertexByQuery method of the parent MockGraphManager instance is
// invoked.
type GraphManagerAddVertexByQueryFunc struct {
	defaultHook func(query.Query) (model.Vertex, error)
	hooks       []func(query.Query) (model.Vertex, error)
	history     []GraphManagerAddVertexByQueryFuncCall
}

// AddVertexByQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) AddVertexByQuery(v0 query.Query) (model.Vertex, error) {
	r0, r1 := m.AddVertexByQueryFunc.nextHook()(v0)
	m.AddVertexByQueryFunc.history = append(m.AddVertexByQueryFunc.history, GraphManagerAddVertexByQueryFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddVertexByQuery
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerAddVertexByQueryFunc) SetDefaultHook(hook func(query.Query) (model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddVertexByQuery method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerAddVertexByQueryFunc) PushHook(hook func(query.Query) (model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddVertexByQueryFunc) SetDefaultReturn(r0 model.Vertex, r1 error) {
	f.SetDefaultHook(func(query.Query) (model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddVertexByQueryFunc) PushReturn(r0 model.Vertex, r1 error) {
	f.PushHook(func(query.Query) (model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddVertexByQueryFunc) nextHook() func(query.Query) (model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddVertexByQueryFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerAddVertexByQueryFunc) History() []GraphManagerAddVertexByQueryFuncCall {
	return f.history
}

// GraphManagerAddVertexByQueryFuncCall is an object that describes an
// invocation of method AddVertexByQuery on an instance of MockGraphManager.
type GraphManagerAddVertexByQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 query.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAddVertexByQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddVertexByQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddVertexByStringFunc describes the behavior when the
// AddVertexByString method of the parent MockGraphManager instance is
// invoked.
type GraphManagerAddVertexByStringFunc struct {
	defaultHook func(string) (model.Vertex, error)
	hooks       []func(string) (model.Vertex, error)
	history     []GraphManagerAddVertexByStringFuncCall
}

// AddVertexByString delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) AddVertexByString(v0 string) (model.Vertex, error) {
	r0, r1 := m.AddVertexByStringFunc.nextHook()(v0)
	m.AddVertexByStringFunc.history = append(m.AddVertexByStringFunc.history, GraphManagerAddVertexByStringFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddVertexByString
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerAddVertexByStringFunc) SetDefaultHook(hook func(string) (model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddVertexByString method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerAddVertexByStringFunc) PushHook(hook func(string) (model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddVertexByStringFunc) SetDefaultReturn(r0 model.Vertex, r1 error) {
	f.SetDefaultHook(func(string) (model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddVertexByStringFunc) PushReturn(r0 model.Vertex, r1 error) {
	f.PushHook(func(string) (model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddVertexByStringFunc) nextHook() func(string) (model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddVertexByStringFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerAddVertexByStringFunc) History() []GraphManagerAddVertexByStringFuncCall {
	return f.history
}

// GraphManagerAddVertexByStringFuncCall is an object that describes an
// invocation of method AddVertexByString on an instance of
// MockGraphManager.
type GraphManagerAddVertexByStringFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAddVertexByStringFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddVertexByStringFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddVertexByStructFunc describes the behavior when the
// AddVertexByStruct method of the parent MockGraphManager instance is
// invoked.
type GraphManagerAddVertexByStructFunc struct {
	defaultHook func(model.Vertex) (model.Vertex, error)
	hooks       []func(model.Vertex) (model.Vertex, error)
	history     []GraphManagerAddVertexByStructFuncCall
}

// AddVertexByStruct delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) AddVertexByStruct(v0 model.Vertex) (model.Vertex, error) {
	r0, r1 := m.AddVertexByStructFunc.nextHook()(v0)
	m.AddVertexByStructFunc.history = append(m.AddVertexByStructFunc.history, GraphManagerAddVertexByStructFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddVertexByStruct
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerAddVertexByStructFunc) SetDefaultHook(hook func(model.Vertex) (model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddVertexByStruct method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerAddVertexByStructFunc) PushHook(hook func(model.Vertex) (model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddVertexByStructFunc) SetDefaultReturn(r0 model.Vertex, r1 error) {
	f.SetDefaultHook(func(model.Vertex) (model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddVertexByStructFunc) PushReturn(r0 model.Vertex, r1 error) {
	f.PushHook(func(model.Vertex) (model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddVertexByStructFunc) nextHook() func(model.Vertex) (model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddVertexByStructFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerAddVertexByStructFunc) History() []GraphManagerAddVertexByStructFuncCall {
	return f.history
}

// GraphManagerAddVertexByStructFuncCall is an object that describes an
// invocation of method AddVertexByStruct on an instance of
// MockGraphManager.
type GraphManagerAddVertexByStructFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 model.Vertex
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAddVertexByStructFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddVertexByStructFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddVertexLabelsFunc describes the behavior when the
// AddVertexLabels method of the parent MockGraphManager instance is
// invoked.
type GraphManagerAddVertexLabelsFunc struct {
	defaultHook func(...string) ([]model.Vertex, error)
	hooks       []func(...string) ([]model.Vertex, error)
	history     []GraphManagerAddVertexLabelsFuncCall
}

// AddVertexLabels delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) AddVertexLabels(v0 ...string) ([]model.Vertex, error) {
	r0, r1 := m.AddVertexLabelsFunc.nextHook()(v0...)
	m.AddVertexLabelsFunc.history = append(m.AddVertexLabelsFunc.history, GraphManagerAddVertexLabelsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddVertexLabels
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerAddVertexLabelsFunc) SetDefaultHook(hook func(...string) ([]model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddVertexLabels method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerAddVertexLabelsFunc) PushHook(hook func(...string) ([]model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddVertexLabelsFunc) SetDefaultReturn(r0 []model.Vertex, r1 error) {
	f.SetDefaultHook(func(...string) ([]model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddVertexLabelsFunc) PushReturn(r0 []model.Vertex, r1 error) {
	f.PushHook(func(...string) ([]model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerAddVertexLabelsFunc) nextHook() func(...string) ([]model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddVertexLabelsFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerAddVertexLabelsFunc) History() []GraphManagerAddVertexLabelsFuncCall {
	return f.history
}

// GraphManagerAddVertexLabelsFuncCall is an object that describes an
// invocation of method AddVertexLabels on an instance of MockGraphManager.
type GraphManagerAddVertexLabelsFuncCall struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GraphManagerAddVertexLabelsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddVertexLabelsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerAddVertexQuerierFunc describes the behavior when the
// AddVertexQuerier method of the parent MockGraphManager instance is
// invoked.
type GraphManagerAddVertexQuerierFunc struct {
	defaultHook func() manager.AddVertexQuerier
	hooks       []func() manager.AddVertexQuerier
	history     []GraphManagerAddVertexQuerierFuncCall
}

// AddVertexQuerier delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) AddVertexQuerier() manager.AddVertexQuerier {
	r0 := m.AddVertexQuerierFunc.nextHook()()
	m.AddVertexQuerierFunc.history = append(m.AddVertexQuerierFunc.history, GraphManagerAddVertexQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddVertexQuerier
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerAddVertexQuerierFunc) SetDefaultHook(hook func() manager.AddVertexQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddVertexQuerier method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerAddVertexQuerierFunc) PushHook(hook func() manager.AddVertexQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAddVertexQuerierFunc) SetDefaultReturn(r0 manager.AddVertexQuerier) {
	f.SetDefaultHook(func() manager.AddVertexQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAddVertexQuerierFunc) PushReturn(r0 manager.AddVertexQuerier) {
	f.PushHook(func() manager.AddVertexQuerier {
		return r0
	})
}

func (f *GraphManagerAddVertexQuerierFunc) nextHook() func() manager.AddVertexQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAddVertexQuerierFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerAddVertexQuerierFunc) History() []GraphManagerAddVertexQuerierFuncCall {
	return f.history
}

// GraphManagerAddVertexQuerierFuncCall is an object that describes an
// invocation of method AddVertexQuerier on an instance of MockGraphManager.
type GraphManagerAddVertexQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.AddVertexQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAddVertexQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAddVertexQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerAllVerticesFunc describes the behavior when the AllVertices
// method of the parent MockGraphManager instance is invoked.
type GraphManagerAllVerticesFunc struct {
	defaultHook func() ([]model.Vertex, error)
	hooks       []func() ([]model.Vertex, error)
	history     []GraphManagerAllVerticesFuncCall
}

// AllVertices delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) AllVertices() ([]model.Vertex, error) {
	r0, r1 := m.AllVerticesFunc.nextHook()()
	m.AllVerticesFunc.history = append(m.AllVerticesFunc.history, GraphManagerAllVerticesFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AllVertices method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerAllVerticesFunc) SetDefaultHook(hook func() ([]model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AllVertices method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerAllVerticesFunc) PushHook(hook func() ([]model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerAllVerticesFunc) SetDefaultReturn(r0 []model.Vertex, r1 error) {
	f.SetDefaultHook(func() ([]model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerAllVerticesFunc) PushReturn(r0 []model.Vertex, r1 error) {
	f.PushHook(func() ([]model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerAllVerticesFunc) nextHook() func() ([]model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerAllVerticesFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerAllVerticesFunc) History() []GraphManagerAllVerticesFuncCall {
	return f.history
}

// GraphManagerAllVerticesFuncCall is an object that describes an invocation
// of method AllVertices on an instance of MockGraphManager.
type GraphManagerAllVerticesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerAllVerticesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerAllVerticesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerCommitSchemaFunc describes the behavior when the CommitSchema
// method of the parent MockGraphManager instance is invoked.
type GraphManagerCommitSchemaFunc struct {
	defaultHook func() ([]byte, error)
	hooks       []func() ([]byte, error)
	history     []GraphManagerCommitSchemaFuncCall
}

// CommitSchema delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) CommitSchema() ([]byte, error) {
	r0, r1 := m.CommitSchemaFunc.nextHook()()
	m.CommitSchemaFunc.history = append(m.CommitSchemaFunc.history, GraphManagerCommitSchemaFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitSchema method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerCommitSchemaFunc) SetDefaultHook(hook func() ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitSchema method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerCommitSchemaFunc) PushHook(hook func() ([]byte, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerCommitSchemaFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func() ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerCommitSchemaFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func() ([]byte, error) {
		return r0, r1
	})
}

func (f *GraphManagerCommitSchemaFunc) nextHook() func() ([]byte, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerCommitSchemaFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerCommitSchemaFunc) History() []GraphManagerCommitSchemaFuncCall {
	return f.history
}

// GraphManagerCommitSchemaFuncCall is an object that describes an
// invocation of method CommitSchema on an instance of MockGraphManager.
type GraphManagerCommitSchemaFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerCommitSchemaFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerCommitSchemaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerDropAllFunc describes the behavior when the DropAll method of
// the parent MockGraphManager instance is invoked.
type GraphManagerDropAllFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []GraphManagerDropAllFuncCall
}

// DropAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGraphManager) DropAll() error {
	r0 := m.DropAllFunc.nextHook()()
	m.DropAllFunc.history = append(m.DropAllFunc.history, GraphManagerDropAllFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DropAll method of
// the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerDropAllFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DropAll method of the parent MockGraphManager instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GraphManagerDropAllFunc) PushHook(hook func() error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerDropAllFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerDropAllFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *GraphManagerDropAllFunc) nextHook() func() error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerDropAllFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerDropAllFunc) History() []GraphManagerDropAllFuncCall {
	return f.history
}

// GraphManagerDropAllFuncCall is an object that describes an invocation of
// method DropAll on an instance of MockGraphManager.
type GraphManagerDropAllFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerDropAllFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerDropAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerDropQuerierFunc describes the behavior when the DropQuerier
// method of the parent MockGraphManager instance is invoked.
type GraphManagerDropQuerierFunc struct {
	defaultHook func() manager.DropQuerier
	hooks       []func() manager.DropQuerier
	history     []GraphManagerDropQuerierFuncCall
}

// DropQuerier delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) DropQuerier() manager.DropQuerier {
	r0 := m.DropQuerierFunc.nextHook()()
	m.DropQuerierFunc.history = append(m.DropQuerierFunc.history, GraphManagerDropQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DropQuerier method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerDropQuerierFunc) SetDefaultHook(hook func() manager.DropQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DropQuerier method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerDropQuerierFunc) PushHook(hook func() manager.DropQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerDropQuerierFunc) SetDefaultReturn(r0 manager.DropQuerier) {
	f.SetDefaultHook(func() manager.DropQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerDropQuerierFunc) PushReturn(r0 manager.DropQuerier) {
	f.PushHook(func() manager.DropQuerier {
		return r0
	})
}

func (f *GraphManagerDropQuerierFunc) nextHook() func() manager.DropQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerDropQuerierFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerDropQuerierFunc) History() []GraphManagerDropQuerierFuncCall {
	return f.history
}

// GraphManagerDropQuerierFuncCall is an object that describes an invocation
// of method DropQuerier on an instance of MockGraphManager.
type GraphManagerDropQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.DropQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerDropQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerDropQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerDropVertexByIDFunc describes the behavior when the
// DropVertexByID method of the parent MockGraphManager instance is invoked.
type GraphManagerDropVertexByIDFunc struct {
	defaultHook func(...int64) error
	hooks       []func(...int64) error
	history     []GraphManagerDropVertexByIDFuncCall
}

// DropVertexByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) DropVertexByID(v0 ...int64) error {
	r0 := m.DropVertexByIDFunc.nextHook()(v0...)
	m.DropVertexByIDFunc.history = append(m.DropVertexByIDFunc.history, GraphManagerDropVertexByIDFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DropVertexByID
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerDropVertexByIDFunc) SetDefaultHook(hook func(...int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DropVertexByID method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerDropVertexByIDFunc) PushHook(hook func(...int64) error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerDropVertexByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(...int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerDropVertexByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(...int64) error {
		return r0
	})
}

func (f *GraphManagerDropVertexByIDFunc) nextHook() func(...int64) error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerDropVertexByIDFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerDropVertexByIDFunc) History() []GraphManagerDropVertexByIDFuncCall {
	return f.history
}

// GraphManagerDropVertexByIDFuncCall is an object that describes an
// invocation of method DropVertexByID on an instance of MockGraphManager.
type GraphManagerDropVertexByIDFuncCall struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GraphManagerDropVertexByIDFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerDropVertexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerDropVertexLabelFunc describes the behavior when the
// DropVertexLabel method of the parent MockGraphManager instance is
// invoked.
type GraphManagerDropVertexLabelFunc struct {
	defaultHook func(string) error
	hooks       []func(string) error
	history     []GraphManagerDropVertexLabelFuncCall
}

// DropVertexLabel delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) DropVertexLabel(v0 string) error {
	r0 := m.DropVertexLabelFunc.nextHook()(v0)
	m.DropVertexLabelFunc.history = append(m.DropVertexLabelFunc.history, GraphManagerDropVertexLabelFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DropVertexLabel
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerDropVertexLabelFunc) SetDefaultHook(hook func(string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DropVertexLabel method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerDropVertexLabelFunc) PushHook(hook func(string) error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerDropVertexLabelFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerDropVertexLabelFunc) PushReturn(r0 error) {
	f.PushHook(func(string) error {
		return r0
	})
}

func (f *GraphManagerDropVertexLabelFunc) nextHook() func(string) error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerDropVertexLabelFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerDropVertexLabelFunc) History() []GraphManagerDropVertexLabelFuncCall {
	return f.history
}

// GraphManagerDropVertexLabelFuncCall is an object that describes an
// invocation of method DropVertexLabel on an instance of MockGraphManager.
type GraphManagerDropVertexLabelFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerDropVertexLabelFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerDropVertexLabelFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerDropVerticesByQueryFunc describes the behavior when the
// DropVerticesByQuery method of the parent MockGraphManager instance is
// invoked.
type GraphManagerDropVerticesByQueryFunc struct {
	defaultHook func(query.Query) error
	hooks       []func(query.Query) error
	history     []GraphManagerDropVerticesByQueryFuncCall
}

// DropVerticesByQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) DropVerticesByQuery(v0 query.Query) error {
	r0 := m.DropVerticesByQueryFunc.nextHook()(v0)
	m.DropVerticesByQueryFunc.history = append(m.DropVerticesByQueryFunc.history, GraphManagerDropVerticesByQueryFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DropVerticesByQuery
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerDropVerticesByQueryFunc) SetDefaultHook(hook func(query.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DropVerticesByQuery method of the parent MockGraphManager instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GraphManagerDropVerticesByQueryFunc) PushHook(hook func(query.Query) error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerDropVerticesByQueryFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(query.Query) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerDropVerticesByQueryFunc) PushReturn(r0 error) {
	f.PushHook(func(query.Query) error {
		return r0
	})
}

func (f *GraphManagerDropVerticesByQueryFunc) nextHook() func(query.Query) error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerDropVerticesByQueryFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerDropVerticesByQueryFunc) History() []GraphManagerDropVerticesByQueryFuncCall {
	return f.history
}

// GraphManagerDropVerticesByQueryFuncCall is an object that describes an
// invocation of method DropVerticesByQuery on an instance of
// MockGraphManager.
type GraphManagerDropVerticesByQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 query.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerDropVerticesByQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerDropVerticesByQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerDropVerticesByStringFunc describes the behavior when the
// DropVerticesByString method of the parent MockGraphManager instance is
// invoked.
type GraphManagerDropVerticesByStringFunc struct {
	defaultHook func(string) error
	hooks       []func(string) error
	history     []GraphManagerDropVerticesByStringFuncCall
}

// DropVerticesByString delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) DropVerticesByString(v0 string) error {
	r0 := m.DropVerticesByStringFunc.nextHook()(v0)
	m.DropVerticesByStringFunc.history = append(m.DropVerticesByStringFunc.history, GraphManagerDropVerticesByStringFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DropVerticesByString
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerDropVerticesByStringFunc) SetDefaultHook(hook func(string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DropVerticesByString method of the parent MockGraphManager instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GraphManagerDropVerticesByStringFunc) PushHook(hook func(string) error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerDropVerticesByStringFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerDropVerticesByStringFunc) PushReturn(r0 error) {
	f.PushHook(func(string) error {
		return r0
	})
}

func (f *GraphManagerDropVerticesByStringFunc) nextHook() func(string) error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerDropVerticesByStringFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerDropVerticesByStringFunc) History() []GraphManagerDropVerticesByStringFuncCall {
	return f.history
}

// GraphManagerDropVerticesByStringFuncCall is an object that describes an
// invocation of method DropVerticesByString on an instance of
// MockGraphManager.
type GraphManagerDropVerticesByStringFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerDropVerticesByStringFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerDropVerticesByStringFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerExecuteBoundQueryFunc describes the behavior when the
// ExecuteBoundQuery method of the parent MockGraphManager instance is
// invoked.
type GraphManagerExecuteBoundQueryFunc struct {
	defaultHook func(query.Query, map[string]string, map[string]string) ([]byte, error)
	hooks       []func(query.Query, map[string]string, map[string]string) ([]byte, error)
	history     []GraphManagerExecuteBoundQueryFuncCall
}

// ExecuteBoundQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) ExecuteBoundQuery(v0 query.Query, v1 map[string]string, v2 map[string]string) ([]byte, error) {
	r0, r1 := m.ExecuteBoundQueryFunc.nextHook()(v0, v1, v2)
	m.ExecuteBoundQueryFunc.history = append(m.ExecuteBoundQueryFunc.history, GraphManagerExecuteBoundQueryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecuteBoundQuery
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerExecuteBoundQueryFunc) SetDefaultHook(hook func(query.Query, map[string]string, map[string]string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecuteBoundQuery method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerExecuteBoundQueryFunc) PushHook(hook func(query.Query, map[string]string, map[string]string) ([]byte, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerExecuteBoundQueryFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(query.Query, map[string]string, map[string]string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerExecuteBoundQueryFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(query.Query, map[string]string, map[string]string) ([]byte, error) {
		return r0, r1
	})
}

func (f *GraphManagerExecuteBoundQueryFunc) nextHook() func(query.Query, map[string]string, map[string]string) ([]byte, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerExecuteBoundQueryFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerExecuteBoundQueryFunc) History() []GraphManagerExecuteBoundQueryFuncCall {
	return f.history
}

// GraphManagerExecuteBoundQueryFuncCall is an object that describes an
// invocation of method ExecuteBoundQuery on an instance of
// MockGraphManager.
type GraphManagerExecuteBoundQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 query.Query
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 map[string]string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 map[string]string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerExecuteBoundQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerExecuteBoundQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerExecuteBoundStringQueryFunc describes the behavior when the
// ExecuteBoundStringQuery method of the parent MockGraphManager instance is
// invoked.
type GraphManagerExecuteBoundStringQueryFunc struct {
	defaultHook func(string, map[string]string, map[string]string) ([]byte, error)
	hooks       []func(string, map[string]string, map[string]string) ([]byte, error)
	history     []GraphManagerExecuteBoundStringQueryFuncCall
}

// ExecuteBoundStringQuery delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGraphManager) ExecuteBoundStringQuery(v0 string, v1 map[string]string, v2 map[string]string) ([]byte, error) {
	r0, r1 := m.ExecuteBoundStringQueryFunc.nextHook()(v0, v1, v2)
	m.ExecuteBoundStringQueryFunc.history = append(m.ExecuteBoundStringQueryFunc.history, GraphManagerExecuteBoundStringQueryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ExecuteBoundStringQuery method of the parent MockGraphManager instance is
// invoked and the hook queue is empty.
func (f *GraphManagerExecuteBoundStringQueryFunc) SetDefaultHook(hook func(string, map[string]string, map[string]string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecuteBoundStringQuery method of the parent MockGraphManager instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GraphManagerExecuteBoundStringQueryFunc) PushHook(hook func(string, map[string]string, map[string]string) ([]byte, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerExecuteBoundStringQueryFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(string, map[string]string, map[string]string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerExecuteBoundStringQueryFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(string, map[string]string, map[string]string) ([]byte, error) {
		return r0, r1
	})
}

func (f *GraphManagerExecuteBoundStringQueryFunc) nextHook() func(string, map[string]string, map[string]string) ([]byte, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerExecuteBoundStringQueryFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerExecuteBoundStringQueryFunc) History() []GraphManagerExecuteBoundStringQueryFuncCall {
	return f.history
}

// GraphManagerExecuteBoundStringQueryFuncCall is an object that describes
// an invocation of method ExecuteBoundStringQuery on an instance of
// MockGraphManager.
type GraphManagerExecuteBoundStringQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 map[string]string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 map[string]string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerExecuteBoundStringQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerExecuteBoundStringQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerExecuteQuerierFunc describes the behavior when the
// ExecuteQuerier method of the parent MockGraphManager instance is invoked.
type GraphManagerExecuteQuerierFunc struct {
	defaultHook func() manager.ExecuteQuerier
	hooks       []func() manager.ExecuteQuerier
	history     []GraphManagerExecuteQuerierFuncCall
}

// ExecuteQuerier delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) ExecuteQuerier() manager.ExecuteQuerier {
	r0 := m.ExecuteQuerierFunc.nextHook()()
	m.ExecuteQuerierFunc.history = append(m.ExecuteQuerierFunc.history, GraphManagerExecuteQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExecuteQuerier
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerExecuteQuerierFunc) SetDefaultHook(hook func() manager.ExecuteQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecuteQuerier method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerExecuteQuerierFunc) PushHook(hook func() manager.ExecuteQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerExecuteQuerierFunc) SetDefaultReturn(r0 manager.ExecuteQuerier) {
	f.SetDefaultHook(func() manager.ExecuteQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerExecuteQuerierFunc) PushReturn(r0 manager.ExecuteQuerier) {
	f.PushHook(func() manager.ExecuteQuerier {
		return r0
	})
}

func (f *GraphManagerExecuteQuerierFunc) nextHook() func() manager.ExecuteQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerExecuteQuerierFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerExecuteQuerierFunc) History() []GraphManagerExecuteQuerierFuncCall {
	return f.history
}

// GraphManagerExecuteQuerierFuncCall is an object that describes an
// invocation of method ExecuteQuerier on an instance of MockGraphManager.
type GraphManagerExecuteQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.ExecuteQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerExecuteQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerExecuteQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerExecuteQueryFunc describes the behavior when the ExecuteQuery
// method of the parent MockGraphManager instance is invoked.
type GraphManagerExecuteQueryFunc struct {
	defaultHook func(query.Query) ([]byte, error)
	hooks       []func(query.Query) ([]byte, error)
	history     []GraphManagerExecuteQueryFuncCall
}

// ExecuteQuery delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) ExecuteQuery(v0 query.Query) ([]byte, error) {
	r0, r1 := m.ExecuteQueryFunc.nextHook()(v0)
	m.ExecuteQueryFunc.history = append(m.ExecuteQueryFunc.history, GraphManagerExecuteQueryFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecuteQuery method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerExecuteQueryFunc) SetDefaultHook(hook func(query.Query) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecuteQuery method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerExecuteQueryFunc) PushHook(hook func(query.Query) ([]byte, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerExecuteQueryFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(query.Query) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerExecuteQueryFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(query.Query) ([]byte, error) {
		return r0, r1
	})
}

func (f *GraphManagerExecuteQueryFunc) nextHook() func(query.Query) ([]byte, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerExecuteQueryFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerExecuteQueryFunc) History() []GraphManagerExecuteQueryFuncCall {
	return f.history
}

// GraphManagerExecuteQueryFuncCall is an object that describes an
// invocation of method ExecuteQuery on an instance of MockGraphManager.
type GraphManagerExecuteQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 query.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerExecuteQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerExecuteQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerExecuteStringQueryFunc describes the behavior when the
// ExecuteStringQuery method of the parent MockGraphManager instance is
// invoked.
type GraphManagerExecuteStringQueryFunc struct {
	defaultHook func(string) ([]byte, error)
	hooks       []func(string) ([]byte, error)
	history     []GraphManagerExecuteStringQueryFuncCall
}

// ExecuteStringQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) ExecuteStringQuery(v0 string) ([]byte, error) {
	r0, r1 := m.ExecuteStringQueryFunc.nextHook()(v0)
	m.ExecuteStringQueryFunc.history = append(m.ExecuteStringQueryFunc.history, GraphManagerExecuteStringQueryFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecuteStringQuery
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerExecuteStringQueryFunc) SetDefaultHook(hook func(string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecuteStringQuery method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerExecuteStringQueryFunc) PushHook(hook func(string) ([]byte, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerExecuteStringQueryFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerExecuteStringQueryFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(string) ([]byte, error) {
		return r0, r1
	})
}

func (f *GraphManagerExecuteStringQueryFunc) nextHook() func(string) ([]byte, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerExecuteStringQueryFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerExecuteStringQueryFunc) History() []GraphManagerExecuteStringQueryFuncCall {
	return f.history
}

// GraphManagerExecuteStringQueryFuncCall is an object that describes an
// invocation of method ExecuteStringQuery on an instance of
// MockGraphManager.
type GraphManagerExecuteStringQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerExecuteStringQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerExecuteStringQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerGetVertexIDQuerierFunc describes the behavior when the
// GetVertexIDQuerier method of the parent MockGraphManager instance is
// invoked.
type GraphManagerGetVertexIDQuerierFunc struct {
	defaultHook func() manager.GetVertexIDQuerier
	hooks       []func() manager.GetVertexIDQuerier
	history     []GraphManagerGetVertexIDQuerierFuncCall
}

// GetVertexIDQuerier delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) GetVertexIDQuerier() manager.GetVertexIDQuerier {
	r0 := m.GetVertexIDQuerierFunc.nextHook()()
	m.GetVertexIDQuerierFunc.history = append(m.GetVertexIDQuerierFunc.history, GraphManagerGetVertexIDQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetVertexIDQuerier
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerGetVertexIDQuerierFunc) SetDefaultHook(hook func() manager.GetVertexIDQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetVertexIDQuerier method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerGetVertexIDQuerierFunc) PushHook(hook func() manager.GetVertexIDQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerGetVertexIDQuerierFunc) SetDefaultReturn(r0 manager.GetVertexIDQuerier) {
	f.SetDefaultHook(func() manager.GetVertexIDQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerGetVertexIDQuerierFunc) PushReturn(r0 manager.GetVertexIDQuerier) {
	f.PushHook(func() manager.GetVertexIDQuerier {
		return r0
	})
}

func (f *GraphManagerGetVertexIDQuerierFunc) nextHook() func() manager.GetVertexIDQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerGetVertexIDQuerierFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerGetVertexIDQuerierFunc) History() []GraphManagerGetVertexIDQuerierFuncCall {
	return f.history
}

// GraphManagerGetVertexIDQuerierFuncCall is an object that describes an
// invocation of method GetVertexIDQuerier on an instance of
// MockGraphManager.
type GraphManagerGetVertexIDQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.GetVertexIDQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerGetVertexIDQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerGetVertexIDQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerGetVertexQuerierFunc describes the behavior when the
// GetVertexQuerier method of the parent MockGraphManager instance is
// invoked.
type GraphManagerGetVertexQuerierFunc struct {
	defaultHook func() manager.GetVertexQuerier
	hooks       []func() manager.GetVertexQuerier
	history     []GraphManagerGetVertexQuerierFuncCall
}

// GetVertexQuerier delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) GetVertexQuerier() manager.GetVertexQuerier {
	r0 := m.GetVertexQuerierFunc.nextHook()()
	m.GetVertexQuerierFunc.history = append(m.GetVertexQuerierFunc.history, GraphManagerGetVertexQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetVertexQuerier
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerGetVertexQuerierFunc) SetDefaultHook(hook func() manager.GetVertexQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetVertexQuerier method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerGetVertexQuerierFunc) PushHook(hook func() manager.GetVertexQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerGetVertexQuerierFunc) SetDefaultReturn(r0 manager.GetVertexQuerier) {
	f.SetDefaultHook(func() manager.GetVertexQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerGetVertexQuerierFunc) PushReturn(r0 manager.GetVertexQuerier) {
	f.PushHook(func() manager.GetVertexQuerier {
		return r0
	})
}

func (f *GraphManagerGetVertexQuerierFunc) nextHook() func() manager.GetVertexQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerGetVertexQuerierFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerGetVertexQuerierFunc) History() []GraphManagerGetVertexQuerierFuncCall {
	return f.history
}

// GraphManagerGetVertexQuerierFuncCall is an object that describes an
// invocation of method GetVertexQuerier on an instance of MockGraphManager.
type GraphManagerGetVertexQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.GetVertexQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerGetVertexQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerGetVertexQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerMiscQuerierFunc describes the behavior when the MiscQuerier
// method of the parent MockGraphManager instance is invoked.
type GraphManagerMiscQuerierFunc struct {
	defaultHook func() manager.MiscQuerier
	hooks       []func() manager.MiscQuerier
	history     []GraphManagerMiscQuerierFuncCall
}

// MiscQuerier delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) MiscQuerier() manager.MiscQuerier {
	r0 := m.MiscQuerierFunc.nextHook()()
	m.MiscQuerierFunc.history = append(m.MiscQuerierFunc.history, GraphManagerMiscQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the MiscQuerier method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerMiscQuerierFunc) SetDefaultHook(hook func() manager.MiscQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MiscQuerier method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerMiscQuerierFunc) PushHook(hook func() manager.MiscQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerMiscQuerierFunc) SetDefaultReturn(r0 manager.MiscQuerier) {
	f.SetDefaultHook(func() manager.MiscQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerMiscQuerierFunc) PushReturn(r0 manager.MiscQuerier) {
	f.PushHook(func() manager.MiscQuerier {
		return r0
	})
}

func (f *GraphManagerMiscQuerierFunc) nextHook() func() manager.MiscQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerMiscQuerierFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerMiscQuerierFunc) History() []GraphManagerMiscQuerierFuncCall {
	return f.history
}

// GraphManagerMiscQuerierFuncCall is an object that describes an invocation
// of method MiscQuerier on an instance of MockGraphManager.
type GraphManagerMiscQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.MiscQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerMiscQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerMiscQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerSchemaQuerierFunc describes the behavior when the
// SchemaQuerier method of the parent MockGraphManager instance is invoked.
type GraphManagerSchemaQuerierFunc struct {
	defaultHook func() manager.SchemaQuerier
	hooks       []func() manager.SchemaQuerier
	history     []GraphManagerSchemaQuerierFuncCall
}

// SchemaQuerier delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) SchemaQuerier() manager.SchemaQuerier {
	r0 := m.SchemaQuerierFunc.nextHook()()
	m.SchemaQuerierFunc.history = append(m.SchemaQuerierFunc.history, GraphManagerSchemaQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SchemaQuerier method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerSchemaQuerierFunc) SetDefaultHook(hook func() manager.SchemaQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SchemaQuerier method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerSchemaQuerierFunc) PushHook(hook func() manager.SchemaQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerSchemaQuerierFunc) SetDefaultReturn(r0 manager.SchemaQuerier) {
	f.SetDefaultHook(func() manager.SchemaQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerSchemaQuerierFunc) PushReturn(r0 manager.SchemaQuerier) {
	f.PushHook(func() manager.SchemaQuerier {
		return r0
	})
}

func (f *GraphManagerSchemaQuerierFunc) nextHook() func() manager.SchemaQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerSchemaQuerierFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerSchemaQuerierFunc) History() []GraphManagerSchemaQuerierFuncCall {
	return f.history
}

// GraphManagerSchemaQuerierFuncCall is an object that describes an
// invocation of method SchemaQuerier on an instance of MockGraphManager.
type GraphManagerSchemaQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.SchemaQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerSchemaQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerSchemaQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerSetLoggerFunc describes the behavior when the SetLogger
// method of the parent MockGraphManager instance is invoked.
type GraphManagerSetLoggerFunc struct {
	defaultHook func(logging.Logger)
	hooks       []func(logging.Logger)
	history     []GraphManagerSetLoggerFuncCall
}

// SetLogger delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGraphManager) SetLogger(v0 logging.Logger) {
	m.SetLoggerFunc.nextHook()(v0)
	m.SetLoggerFunc.history = append(m.SetLoggerFunc.history, GraphManagerSetLoggerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetLogger method of
// the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerSetLoggerFunc) SetDefaultHook(hook func(logging.Logger)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLogger method of the parent MockGraphManager instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GraphManagerSetLoggerFunc) PushHook(hook func(logging.Logger)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerSetLoggerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(logging.Logger) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerSetLoggerFunc) PushReturn() {
	f.PushHook(func(logging.Logger) {
		return
	})
}

func (f *GraphManagerSetLoggerFunc) nextHook() func(logging.Logger) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerSetLoggerFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerSetLoggerFunc) History() []GraphManagerSetLoggerFuncCall {
	return f.history
}

// GraphManagerSetLoggerFuncCall is an object that describes an invocation
// of method SetLogger on an instance of MockGraphManager.
type GraphManagerSetLoggerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 logging.Logger
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerSetLoggerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerSetLoggerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// GraphManagerSetVertexPropertyFunc describes the behavior when the
// SetVertexProperty method of the parent MockGraphManager instance is
// invoked.
type GraphManagerSetVertexPropertyFunc struct {
	defaultHook func(int64, ...interface{}) error
	hooks       []func(int64, ...interface{}) error
	history     []GraphManagerSetVertexPropertyFuncCall
}

// SetVertexProperty delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) SetVertexProperty(v0 int64, v1 ...interface{}) error {
	r0 := m.SetVertexPropertyFunc.nextHook()(v0, v1...)
	m.SetVertexPropertyFunc.history = append(m.SetVertexPropertyFunc.history, GraphManagerSetVertexPropertyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetVertexProperty
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerSetVertexPropertyFunc) SetDefaultHook(hook func(int64, ...interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetVertexProperty method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerSetVertexPropertyFunc) PushHook(hook func(int64, ...interface{}) error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerSetVertexPropertyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(int64, ...interface{}) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerSetVertexPropertyFunc) PushReturn(r0 error) {
	f.PushHook(func(int64, ...interface{}) error {
		return r0
	})
}

func (f *GraphManagerSetVertexPropertyFunc) nextHook() func(int64, ...interface{}) error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerSetVertexPropertyFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerSetVertexPropertyFunc) History() []GraphManagerSetVertexPropertyFuncCall {
	return f.history
}

// GraphManagerSetVertexPropertyFuncCall is an object that describes an
// invocation of method SetVertexProperty on an instance of
// MockGraphManager.
type GraphManagerSetVertexPropertyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int64
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GraphManagerSetVertexPropertyFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerSetVertexPropertyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerVertexByIDFunc describes the behavior when the VertexByID
// method of the parent MockGraphManager instance is invoked.
type GraphManagerVertexByIDFunc struct {
	defaultHook func(int64) (model.Vertex, error)
	hooks       []func(int64) (model.Vertex, error)
	history     []GraphManagerVertexByIDFuncCall
}

// VertexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) VertexByID(v0 int64) (model.Vertex, error) {
	r0, r1 := m.VertexByIDFunc.nextHook()(v0)
	m.VertexByIDFunc.history = append(m.VertexByIDFunc.history, GraphManagerVertexByIDFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VertexByID method of
// the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerVertexByIDFunc) SetDefaultHook(hook func(int64) (model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VertexByID method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerVertexByIDFunc) PushHook(hook func(int64) (model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVertexByIDFunc) SetDefaultReturn(r0 model.Vertex, r1 error) {
	f.SetDefaultHook(func(int64) (model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVertexByIDFunc) PushReturn(r0 model.Vertex, r1 error) {
	f.PushHook(func(int64) (model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerVertexByIDFunc) nextHook() func(int64) (model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVertexByIDFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerVertexByIDFunc) History() []GraphManagerVertexByIDFuncCall {
	return f.history
}

// GraphManagerVertexByIDFuncCall is an object that describes an invocation
// of method VertexByID on an instance of MockGraphManager.
type GraphManagerVertexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerVertexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVertexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerVertexCountFunc describes the behavior when the VertexCount
// method of the parent MockGraphManager instance is invoked.
type GraphManagerVertexCountFunc struct {
	defaultHook func() (int64, error)
	hooks       []func() (int64, error)
	history     []GraphManagerVertexCountFuncCall
}

// VertexCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) VertexCount() (int64, error) {
	r0, r1 := m.VertexCountFunc.nextHook()()
	m.VertexCountFunc.history = append(m.VertexCountFunc.history, GraphManagerVertexCountFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VertexCount method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerVertexCountFunc) SetDefaultHook(hook func() (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VertexCount method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerVertexCountFunc) PushHook(hook func() (int64, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVertexCountFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func() (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVertexCountFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func() (int64, error) {
		return r0, r1
	})
}

func (f *GraphManagerVertexCountFunc) nextHook() func() (int64, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVertexCountFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerVertexCountFunc) History() []GraphManagerVertexCountFuncCall {
	return f.history
}

// GraphManagerVertexCountFuncCall is an object that describes an invocation
// of method VertexCount on an instance of MockGraphManager.
type GraphManagerVertexCountFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerVertexCountFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVertexCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerVertexIDsFunc describes the behavior when the VertexIDs
// method of the parent MockGraphManager instance is invoked.
type GraphManagerVertexIDsFunc struct {
	defaultHook func(string, ...interface{}) ([]int64, error)
	hooks       []func(string, ...interface{}) ([]int64, error)
	history     []GraphManagerVertexIDsFuncCall
}

// VertexIDs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGraphManager) VertexIDs(v0 string, v1 ...interface{}) ([]int64, error) {
	r0, r1 := m.VertexIDsFunc.nextHook()(v0, v1...)
	m.VertexIDsFunc.history = append(m.VertexIDsFunc.history, GraphManagerVertexIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VertexIDs method of
// the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerVertexIDsFunc) SetDefaultHook(hook func(string, ...interface{}) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VertexIDs method of the parent MockGraphManager instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GraphManagerVertexIDsFunc) PushHook(hook func(string, ...interface{}) ([]int64, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVertexIDsFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(string, ...interface{}) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVertexIDsFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(string, ...interface{}) ([]int64, error) {
		return r0, r1
	})
}

func (f *GraphManagerVertexIDsFunc) nextHook() func(string, ...interface{}) ([]int64, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVertexIDsFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerVertexIDsFunc) History() []GraphManagerVertexIDsFuncCall {
	return f.history
}

// GraphManagerVertexIDsFuncCall is an object that describes an invocation
// of method VertexIDs on an instance of MockGraphManager.
type GraphManagerVertexIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GraphManagerVertexIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVertexIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerVertexIDsByQueryFunc describes the behavior when the
// VertexIDsByQuery method of the parent MockGraphManager instance is
// invoked.
type GraphManagerVertexIDsByQueryFunc struct {
	defaultHook func(query.Query) ([]int64, error)
	hooks       []func(query.Query) ([]int64, error)
	history     []GraphManagerVertexIDsByQueryFuncCall
}

// VertexIDsByQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) VertexIDsByQuery(v0 query.Query) ([]int64, error) {
	r0, r1 := m.VertexIDsByQueryFunc.nextHook()(v0)
	m.VertexIDsByQueryFunc.history = append(m.VertexIDsByQueryFunc.history, GraphManagerVertexIDsByQueryFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VertexIDsByQuery
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerVertexIDsByQueryFunc) SetDefaultHook(hook func(query.Query) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VertexIDsByQuery method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerVertexIDsByQueryFunc) PushHook(hook func(query.Query) ([]int64, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVertexIDsByQueryFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(query.Query) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVertexIDsByQueryFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(query.Query) ([]int64, error) {
		return r0, r1
	})
}

func (f *GraphManagerVertexIDsByQueryFunc) nextHook() func(query.Query) ([]int64, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVertexIDsByQueryFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerVertexIDsByQueryFunc) History() []GraphManagerVertexIDsByQueryFuncCall {
	return f.history
}

// GraphManagerVertexIDsByQueryFuncCall is an object that describes an
// invocation of method VertexIDsByQuery on an instance of MockGraphManager.
type GraphManagerVertexIDsByQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 query.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerVertexIDsByQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVertexIDsByQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerVertexIDsByStringFunc describes the behavior when the
// VertexIDsByString method of the parent MockGraphManager instance is
// invoked.
type GraphManagerVertexIDsByStringFunc struct {
	defaultHook func(string) ([]int64, error)
	hooks       []func(string) ([]int64, error)
	history     []GraphManagerVertexIDsByStringFuncCall
}

// VertexIDsByString delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) VertexIDsByString(v0 string) ([]int64, error) {
	r0, r1 := m.VertexIDsByStringFunc.nextHook()(v0)
	m.VertexIDsByStringFunc.history = append(m.VertexIDsByStringFunc.history, GraphManagerVertexIDsByStringFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VertexIDsByString
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerVertexIDsByStringFunc) SetDefaultHook(hook func(string) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VertexIDsByString method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerVertexIDsByStringFunc) PushHook(hook func(string) ([]int64, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVertexIDsByStringFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(string) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVertexIDsByStringFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(string) ([]int64, error) {
		return r0, r1
	})
}

func (f *GraphManagerVertexIDsByStringFunc) nextHook() func(string) ([]int64, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVertexIDsByStringFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerVertexIDsByStringFunc) History() []GraphManagerVertexIDsByStringFuncCall {
	return f.history
}

// GraphManagerVertexIDsByStringFuncCall is an object that describes an
// invocation of method VertexIDsByString on an instance of
// MockGraphManager.
type GraphManagerVertexIDsByStringFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerVertexIDsByStringFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVertexIDsByStringFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerVertexQuerierFunc describes the behavior when the
// VertexQuerier method of the parent MockGraphManager instance is invoked.
type GraphManagerVertexQuerierFunc struct {
	defaultHook func() manager.VertexQuerier
	hooks       []func() manager.VertexQuerier
	history     []GraphManagerVertexQuerierFuncCall
}

// VertexQuerier delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGraphManager) VertexQuerier() manager.VertexQuerier {
	r0 := m.VertexQuerierFunc.nextHook()()
	m.VertexQuerierFunc.history = append(m.VertexQuerierFunc.history, GraphManagerVertexQuerierFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the VertexQuerier method
// of the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerVertexQuerierFunc) SetDefaultHook(hook func() manager.VertexQuerier) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VertexQuerier method of the parent MockGraphManager instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GraphManagerVertexQuerierFunc) PushHook(hook func() manager.VertexQuerier) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVertexQuerierFunc) SetDefaultReturn(r0 manager.VertexQuerier) {
	f.SetDefaultHook(func() manager.VertexQuerier {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVertexQuerierFunc) PushReturn(r0 manager.VertexQuerier) {
	f.PushHook(func() manager.VertexQuerier {
		return r0
	})
}

func (f *GraphManagerVertexQuerierFunc) nextHook() func() manager.VertexQuerier {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVertexQuerierFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerVertexQuerierFunc) History() []GraphManagerVertexQuerierFuncCall {
	return f.history
}

// GraphManagerVertexQuerierFuncCall is an object that describes an
// invocation of method VertexQuerier on an instance of MockGraphManager.
type GraphManagerVertexQuerierFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 manager.VertexQuerier
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerVertexQuerierFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVertexQuerierFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GraphManagerVerticesFunc describes the behavior when the Vertices method
// of the parent MockGraphManager instance is invoked.
type GraphManagerVerticesFunc struct {
	defaultHook func(string, ...interface{}) ([]model.Vertex, error)
	hooks       []func(string, ...interface{}) ([]model.Vertex, error)
	history     []GraphManagerVerticesFuncCall
}

// Vertices delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGraphManager) Vertices(v0 string, v1 ...interface{}) ([]model.Vertex, error) {
	r0, r1 := m.VerticesFunc.nextHook()(v0, v1...)
	m.VerticesFunc.history = append(m.VerticesFunc.history, GraphManagerVerticesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Vertices method of
// the parent MockGraphManager instance is invoked and the hook queue is
// empty.
func (f *GraphManagerVerticesFunc) SetDefaultHook(hook func(string, ...interface{}) ([]model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Vertices method of the parent MockGraphManager instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GraphManagerVerticesFunc) PushHook(hook func(string, ...interface{}) ([]model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVerticesFunc) SetDefaultReturn(r0 []model.Vertex, r1 error) {
	f.SetDefaultHook(func(string, ...interface{}) ([]model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVerticesFunc) PushReturn(r0 []model.Vertex, r1 error) {
	f.PushHook(func(string, ...interface{}) ([]model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerVerticesFunc) nextHook() func(string, ...interface{}) ([]model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVerticesFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerVerticesFunc) History() []GraphManagerVerticesFuncCall {
	return f.history
}

// GraphManagerVerticesFuncCall is an object that describes an invocation of
// method Vertices on an instance of MockGraphManager.
type GraphManagerVerticesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GraphManagerVerticesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVerticesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerVerticesByQueryFunc describes the behavior when the
// VerticesByQuery method of the parent MockGraphManager instance is
// invoked.
type GraphManagerVerticesByQueryFunc struct {
	defaultHook func(query.Query) ([]model.Vertex, error)
	hooks       []func(query.Query) ([]model.Vertex, error)
	history     []GraphManagerVerticesByQueryFuncCall
}

// VerticesByQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) VerticesByQuery(v0 query.Query) ([]model.Vertex, error) {
	r0, r1 := m.VerticesByQueryFunc.nextHook()(v0)
	m.VerticesByQueryFunc.history = append(m.VerticesByQueryFunc.history, GraphManagerVerticesByQueryFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VerticesByQuery
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerVerticesByQueryFunc) SetDefaultHook(hook func(query.Query) ([]model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VerticesByQuery method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerVerticesByQueryFunc) PushHook(hook func(query.Query) ([]model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVerticesByQueryFunc) SetDefaultReturn(r0 []model.Vertex, r1 error) {
	f.SetDefaultHook(func(query.Query) ([]model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVerticesByQueryFunc) PushReturn(r0 []model.Vertex, r1 error) {
	f.PushHook(func(query.Query) ([]model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerVerticesByQueryFunc) nextHook() func(query.Query) ([]model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVerticesByQueryFuncCall objects
// describing the invocations of this function.
func (f *GraphManagerVerticesByQueryFunc) History() []GraphManagerVerticesByQueryFuncCall {
	return f.history
}

// GraphManagerVerticesByQueryFuncCall is an object that describes an
// invocation of method VerticesByQuery on an instance of MockGraphManager.
type GraphManagerVerticesByQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 query.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerVerticesByQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVerticesByQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GraphManagerVerticesByStringFunc describes the behavior when the
// VerticesByString method of the parent MockGraphManager instance is
// invoked.
type GraphManagerVerticesByStringFunc struct {
	defaultHook func(string) ([]model.Vertex, error)
	hooks       []func(string) ([]model.Vertex, error)
	history     []GraphManagerVerticesByStringFuncCall
}

// VerticesByString delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGraphManager) VerticesByString(v0 string) ([]model.Vertex, error) {
	r0, r1 := m.VerticesByStringFunc.nextHook()(v0)
	m.VerticesByStringFunc.history = append(m.VerticesByStringFunc.history, GraphManagerVerticesByStringFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VerticesByString
// method of the parent MockGraphManager instance is invoked and the hook
// queue is empty.
func (f *GraphManagerVerticesByStringFunc) SetDefaultHook(hook func(string) ([]model.Vertex, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VerticesByString method of the parent MockGraphManager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GraphManagerVerticesByStringFunc) PushHook(hook func(string) ([]model.Vertex, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GraphManagerVerticesByStringFunc) SetDefaultReturn(r0 []model.Vertex, r1 error) {
	f.SetDefaultHook(func(string) ([]model.Vertex, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GraphManagerVerticesByStringFunc) PushReturn(r0 []model.Vertex, r1 error) {
	f.PushHook(func(string) ([]model.Vertex, error) {
		return r0, r1
	})
}

func (f *GraphManagerVerticesByStringFunc) nextHook() func(string) ([]model.Vertex, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of GraphManagerVerticesByStringFuncCall
// objects describing the invocations of this function.
func (f *GraphManagerVerticesByStringFunc) History() []GraphManagerVerticesByStringFuncCall {
	return f.history
}

// GraphManagerVerticesByStringFuncCall is an object that describes an
// invocation of method VerticesByString on an instance of MockGraphManager.
type GraphManagerVerticesByStringFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []model.Vertex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GraphManagerVerticesByStringFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GraphManagerVerticesByStringFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
